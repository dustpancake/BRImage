# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

if _swig_python_version_info >= (2, 7, 0):

    def swig_import_helper():
        import importlib

        pkg = __name__.rpartition(".")[0]
        mname = ".".join((pkg, "_algorithms")).lstrip(".")
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module("_algorithms")

    _algorithms = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):

    def swig_import_helper():
        from os.path import dirname
        import imp

        fp = None
        try:
            fp, pathname, description = imp.find_module(
                "_algorithms", [dirname(__file__)]
            )
        except ImportError:
            import _algorithms

            return _algorithms
        try:
            _mod = imp.load_module("_algorithms", fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod

    _algorithms = swig_import_helper()
    del swig_import_helper
else:
    import _algorithms
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == "SwigPyObject":
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError(
        "'%s' object has no attribute '%s'" % (class_type.__name__, name)
    )


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (
        self.__class__.__module__,
        self.__class__.__name__,
        strthis,
    )


try:
    _object = object
    _newclass = 1
except __builtin__.Exception:

    class _object:
        pass

    _newclass = 0


def freqmod_row(
    input_arr: "double *", output_arr: "double *", omega: "double", max_phase: "double"
) -> "int":
    return _algorithms.freqmod_row(input_arr, output_arr, omega, max_phase)


freqmod_row = _algorithms.freqmod_row


def test(inplace_img: "PX_TYPE *") -> "void":
    return _algorithms.test(inplace_img)


test = _algorithms.test


class RGBCanvas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RGBCanvas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RGBCanvas, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _algorithms.delete_RGBCanvas
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _algorithms.new_RGBCanvas(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


RGBCanvas_swigregister = _algorithms.RGBCanvas_swigregister
RGBCanvas_swigregister(RGBCanvas)


class MonochomeCanvas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(
        self, MonochomeCanvas, name, value
    )
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonochomeCanvas, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _algorithms.delete_MonochomeCanvas
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _algorithms.new_MonochomeCanvas(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


MonochomeCanvas_swigregister = _algorithms.MonochomeCanvas_swigregister
MonochomeCanvas_swigregister(MonochomeCanvas)


def random_walk_monochrome(
    reference: "MonochomeCanvas",
    canvas: "MonochomeCanvas",
    x_init: "int",
    y_init: "int",
) -> "void":
    return _algorithms.random_walk_monochrome(reference, canvas, x_init, y_init)


random_walk_monochrome = _algorithms.random_walk_monochrome


def random_walk_rgb(
    reference: "RGBCanvas", canvas: "RGBCanvas", x_init: "int", y_init: "int"
) -> "void":
    return _algorithms.random_walk_rgb(reference, canvas, x_init, y_init)


random_walk_rgb = _algorithms.random_walk_rgb


def freqmod(arr, omega, max_phase):
    return freqmod_row(arr, len(arr), omega, max_phase)


# This file is compatible with both classic and new-style classes.
